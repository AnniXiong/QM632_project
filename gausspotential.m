% gausspotential.m%% Script to solve the shrodinger equations of motion, % implenting eigen Energy solver is under construction%%    Vx = -A*exp((-x^2)/(w^2));%    Dxpsi = psi_prime;%    Dxpsi_prime = (2*m/(h_bar^2)) *(Vx - E)*psi;%  declare some variables as 'global', because the derivative function %  will need to access them, but there isn't another graceful way%  to pass themglobal w m A h_bar E xfinal psi0 psi_prime0 x0% global parameter definitionw = 2*pi; % angular frequencym = 1; % massA =  10;h_bar = 1;E = 1;x0 = 0;xfinal = 2;% For even statespsi0 = 1;psi_prime0 = 0;% For odd states%psi = 0;%psi_prime = 1;% Solving time independent Shrodinger equfunction ydot = hosc_func(x, y)  global w m A h_bar E  % unpack input vector  psi = y(1);  psi_prime = y(2);  % compute derivatives  Vx = -A*exp((-x^2)/(w^2));  Dxpsi = psi_prime;  Dxpsi_prime = (2*m/(h_bar^2)) *(Vx - E)*psi;  % pack output derivative vector  ydot = [Dxpsi; Dxpsi_prime];  endfunction% for the integrator, you need a function to evaluate the derivative% (i.e., the right-hand side) of the differential equation.function psifinal = rootfunc(E)  global w m A h_bar xfinal psi0 psi_prime0 x0% pack initial conditionsy0 = [psi0; psi_prime0];% now use ode45 (fourth and fifth order Runge Kutta method)% to solve differential equation.[xout, yout] = ode45('hosc_func', [x0, xfinal], y0);% unpack solutionspsi_out = yout(:,1);Dxpsi_prime_out = yout(:,2);%picking out psi at the largest xpsifinal = psi_out(length(psi_out));% plot the resultplot(xout, psi_out);xlabel('x');ylabel('Psi(x)');title('Schrodinger equation finder');endfunctionpsifinal = rootfunc(E);% get final psiprintf("final psi point: psi = %f\n", psifinal);% pre-evaluate function at ends of bracketing interval%fa = rootfunc(x0); fb = rootfunc(xfinal);%printf("final and initial psi value %f, %f\n",fa, fb);% The above plot only uses time points used in the integration; for a %   smoother plot you will have to define a high-resolution time grid%   and interpolate ode45's solution.  Something like:% tarr = (t0:(tfinal/1000):tfinal)';% plot(tarr, interp1 (tout, xout, tarr, "spline"));% To save your plot to a pdf file, do something like:% print("myplot.pdf")